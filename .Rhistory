emo::ji("game")
install.packages("emo")
devtools::install_github("hadley/emo")
emo::ji("game")
emo::ji("gaming")
emo::ji("controller")
emo::ji("guitar")
emo::ji("camera")
quarto add quarto-ext/lightbox
knitr::kable(head(CR.sex.chicks09))
knitr::kable(head(CR.sex.chicks09))
knitr::kable(head(data/CR.sex.chicks09))
knitr::kable(head("data/CR.sex.chicks09"))
# Load function definitions
source("functions.R")
# Load function definitions
source("functions.R")
# Load function definitions
source("functions/functions.R")
load(file = "CR.sex.chicks09.RData")
load(file = "data/CR.sex.chicks09.RData")
knitr::kable(head(CR.sex.chicks09))
library(tidyverse)
# Load function definitions
source("functions/functions.R")
load(file = "data/CR.sex.chicks09.RData")
knitr::kable(head(CR.sex.chicks09))
CH <- as.matrix(CR.sex.chicks09[, -14])
n.ind <- dim(CR.sex.chicks09)[1]
n.occasion <- dim(CR.sex.chicks09[1:13])[2]
marr.full <- marray(CH)
marr.full.df <- data.frame(marr.full)
colnames(marr.full.df) <- c(paste("j =", c(2:13)), "never recaptured")
rownames(marr.full.df) <- paste("i =", c(1:12))
knitr::kable(marr.full.df)
caplik.constant <- function(theta, data){
# Number of release occasions and recovery occasions
ni = dim(data)[1]
nj = dim(data)[2]
# Set up the size of the arrays containing the survival probabilities, recapture
# probabilities and cell probabilities and set them all initially to zero
phi <- array(0,(nj-1))
p <- array(0,(nj-1))
pbar <- array(0,(nj-1))
q <- array(0,dim=c(ni,nj))
# Define the parameters to be constant or time-dependent
for (t in 1:nj) {
p[t] <- 1/(1+exp(-theta[1]))
phi[t] <- 1/(1+exp(-theta[2]))
pbar[t] <- 1-p[t]
}
# Calculate the multinomial cell probabilities
# Diagonal elements
for (t in 1:ni){
q[t,t] <- phi[t]*p[t]
}
# Off diagonal elements
for (t in 1:(ni-1)){
for (j in (t+1):(nj-1)) {
q[t,j] <- prod(phi[t:j])*prod(pbar[t:(j-1)])*p[j]
}
}
# Calculate the disappearing animal probabilities
for (t in 1:ni){
q[t,nj] <- 1 - sum(q[t,t:(nj-1)])
}
# Calculate the likelihood function
likhood <- 0
for (t in 1:ni){
for (j in t:nj) {
likhood <- likhood + data[t,j]*log(q[t,j])
}
}
# Output the negative loglikelihood value:
likhood<- -likhood
}
# MLE
opt.constant <- optim(par = c(1, 1),
fn = caplik.constant,
data = marr.full,
hessian = TRUE)
MLE.constant <- readRDS(file = "data/MLE.constant.rds")
knitr::kable(MLE.constant)
CH.m <- as.matrix(CR.sex.chicks09[which(CR.sex.chicks09$Sex == "M"), 1:13])
CH.f <- as.matrix(CR.sex.chicks09[which(CR.sex.chicks09$Sex == "F"), 1:13])
marr.m <- marray(CH.m)
marr.f <- marray(CH.f)
MLE.sex <- readRDS(file = "data/MLE.sex.rds")
knitr::kable(MLE.sex)
MLE.age <- readRDS(file = "data/MLE.age.rds")
knitr::kable(MLE.age)
AIC.age <- readRDS(file = "data/AIC.age.rds")
knitr::kable(AIC.age)
MLE.age.sex <- readRDS(file = "data/MLE.age.sex.rds")
knitr::kable(MLE.age.sex)
AIC.age.sex <- readRDS(file = "data/AIC.age.sex.rds")
colnames(AIC.age.sex) <- "AIC"
knitr::kable(AIC.age.sex)
model.selection <- readRDS(file = "data/model.selection.rds")
knitr::kable(data.frame(model.selection))
params <- readRDS(file = "data/params.rds")
knitr::kable(data.frame(params))
AIC.age
AIC.age[1]
AIC.age[1,1]
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lkx724',
token='DE081FA9C2B45F54894EC525255466D2',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lkx724', token='DE081FA9C2B45F54894EC525255466D2', secret='Oh0GY4ctdUnyB9+uV/zWo+VmS0JaGh1Hx27LWgcO')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('app.R')
source('app.R')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example/app.R')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example/app.R')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example')
source('app.R')
source('~/app.R')
source('app.R')
# Load function definitions
source("app.R")
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
shiny::runApp('posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
runApp('posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/2023-03-17_Q-Q-plot')
CH <- as.matrix(CR.sex.chicks09[, -14])
n.occasions <- dim(ch)[2]    # no. of occasions
## function to transfer capture history to m-array
#' Title
#'
#' @param ch capture history
#'
#' @return m-array of the input capture history
#'
#' @examples
marray <- function(ch){
nind <- dim(ch)[1]    # no. of individuals
n.occasions <- dim(ch)[2]    # no. of occasions
m.array <- matrix(data = 0, ncol = n.occasions+1, nrow = n.occasions)
# calculate the number of released individuals at each time period
for (t in 1:n.occasions){
m.array[t, 1] <- sum(ch[, t])
}
for (i in 1:nind){
pos <- which(ch[i, ] != 0)
g <- length(pos)
for (z in 1:(g-1)){
m.array[pos[z], pos[z+1]] <- m.array[pos[z], pos[z+1]] + 1
} #z
} #i
# calculate the number of individuals that is never recaptured
for (t in 1:n.occasions){
m.array[t, n.occasions+1] <- m.array[t, 1] - sum(m.array[t, 2:n.occasions])
}
out <- m.array[1:(n.occasions-1), 2:(n.occasions+1)]
return(out)
}
marray(CH)
age <- numeric()
#' Function to split CH into different age class
#'
#' @param CH
#' @param age
#' @param mAge number of age classes, default is set to 3 classes
#'
#' @return
#' @export
#'
#' @examples
marray.age <- function(CH,age,mAge=3){
age <- numeric()
for (i in 1: dim(CH)[1]){
age[i]<-1
}
# 1.2. Function to remove histories without any capture from a capture-recapture matrix
clean.CH <- function(CH){
incl <- which(rowSums(CH)>=1)
CH <- CH[incl,]
return(CH)
}
# 1.3. Function to remove the first capture in a capture-recapture matrix
rm.first <- function(CH) {
get.first <- function(x) min(which(x==1))
first <- apply(CH, 1, get.first)
for (i in 1:nrow(CH)){
CH[i,first[i]] <- 0
}
return(CH)
}
# 1.4. Function to calculate the occasion of first capture
get.first <- function(x) min(which(x!=0))
# 2. Calculations
if (is.matrix(CH)==FALSE) CH <- matrix(CH, nrow = 1)
maxAge <- max(c(max(age), mAge))
nind <- nrow(CH)
n.occasions <- ncol(CH)
first <- apply(CH, 1, get.first)
age.matrix <- matrix(0, ncol = n.occasions, nrow = nind)
for (i in 1:nind){
age.matrix[i,first[i]:n.occasions] <- 1:(n.occasions-first[i]+1)+(age[i]-1)
}
age.matrix[age.matrix > maxAge] <- maxAge
# Recode capture history
CH.rec <- CH
for (i in 1:nind){
h <- which(CH.rec[i,]==1)
for (j in 1:length(h)){
CH.rec[i,h[j]] <- j
} # j
} # i
CH.rec[CH.rec > maxAge] <- maxAge
CH.split <- array(0, dim = c(nrow(CH), ncol(CH), maxAge))
for (a in 1:maxAge){
for (i in 1:nind){
j <- which(CH.rec[i,]==a | CH.rec[i,]==(a+1))
if (length(j)==0) next
CH.split[i,j[1:2],age.matrix[i,j[1]]] <- 1
if (length(j)>1){
CH.split[i,j[2:length(j)],age.matrix[i,j[2]]] <- 1
}
} # i
} # a
marr <- array(0, dim = c(n.occasions-1, n.occasions, maxAge))
for (a in 1:(maxAge-1)){
for (i in 1:nind){
u <- which(CH.split[i,,a]==1)
if (length(u)==0) next
if (u[1]==n.occasions) next
if (length(u)==1) marr[u,n.occasions,a] <- marr[u,n.occasions,a] + 1
if (length(u)==2) marr[u[1],u[2]-1,a] <- marr[u[1],u[2]-1,a] + 1
} # i
} # a
a <- maxAge
if (is.matrix(CH.split[,,a])==FALSE){
CH.split1 <- matrix(CH.split[,,a], nrow = 1)
marr[,,a] <- marray(CH.split1)
} # if
else marr[,,a] <- marray(CH.split[,,a])
return(marr)
}
marray.age(CH)
CH
CH.shape
CH.size
size(CH)
CR.sex.chicks09
usethis::use_mit_license()
