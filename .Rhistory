emo::ji("game")
install.packages("emo")
devtools::install_github("hadley/emo")
emo::ji("game")
emo::ji("gaming")
emo::ji("controller")
emo::ji("guitar")
emo::ji("camera")
quarto add quarto-ext/lightbox
knitr::kable(head(CR.sex.chicks09))
knitr::kable(head(CR.sex.chicks09))
knitr::kable(head(data/CR.sex.chicks09))
knitr::kable(head("data/CR.sex.chicks09"))
# Load function definitions
source("functions.R")
# Load function definitions
source("functions.R")
# Load function definitions
source("functions/functions.R")
load(file = "CR.sex.chicks09.RData")
load(file = "data/CR.sex.chicks09.RData")
knitr::kable(head(CR.sex.chicks09))
library(tidyverse)
# Load function definitions
source("functions/functions.R")
load(file = "data/CR.sex.chicks09.RData")
knitr::kable(head(CR.sex.chicks09))
CH <- as.matrix(CR.sex.chicks09[, -14])
n.ind <- dim(CR.sex.chicks09)[1]
n.occasion <- dim(CR.sex.chicks09[1:13])[2]
marr.full <- marray(CH)
marr.full.df <- data.frame(marr.full)
colnames(marr.full.df) <- c(paste("j =", c(2:13)), "never recaptured")
rownames(marr.full.df) <- paste("i =", c(1:12))
knitr::kable(marr.full.df)
caplik.constant <- function(theta, data){
# Number of release occasions and recovery occasions
ni = dim(data)[1]
nj = dim(data)[2]
# Set up the size of the arrays containing the survival probabilities, recapture
# probabilities and cell probabilities and set them all initially to zero
phi <- array(0,(nj-1))
p <- array(0,(nj-1))
pbar <- array(0,(nj-1))
q <- array(0,dim=c(ni,nj))
# Define the parameters to be constant or time-dependent
for (t in 1:nj) {
p[t] <- 1/(1+exp(-theta[1]))
phi[t] <- 1/(1+exp(-theta[2]))
pbar[t] <- 1-p[t]
}
# Calculate the multinomial cell probabilities
# Diagonal elements
for (t in 1:ni){
q[t,t] <- phi[t]*p[t]
}
# Off diagonal elements
for (t in 1:(ni-1)){
for (j in (t+1):(nj-1)) {
q[t,j] <- prod(phi[t:j])*prod(pbar[t:(j-1)])*p[j]
}
}
# Calculate the disappearing animal probabilities
for (t in 1:ni){
q[t,nj] <- 1 - sum(q[t,t:(nj-1)])
}
# Calculate the likelihood function
likhood <- 0
for (t in 1:ni){
for (j in t:nj) {
likhood <- likhood + data[t,j]*log(q[t,j])
}
}
# Output the negative loglikelihood value:
likhood<- -likhood
}
# MLE
opt.constant <- optim(par = c(1, 1),
fn = caplik.constant,
data = marr.full,
hessian = TRUE)
MLE.constant <- readRDS(file = "data/MLE.constant.rds")
knitr::kable(MLE.constant)
CH.m <- as.matrix(CR.sex.chicks09[which(CR.sex.chicks09$Sex == "M"), 1:13])
CH.f <- as.matrix(CR.sex.chicks09[which(CR.sex.chicks09$Sex == "F"), 1:13])
marr.m <- marray(CH.m)
marr.f <- marray(CH.f)
MLE.sex <- readRDS(file = "data/MLE.sex.rds")
knitr::kable(MLE.sex)
MLE.age <- readRDS(file = "data/MLE.age.rds")
knitr::kable(MLE.age)
AIC.age <- readRDS(file = "data/AIC.age.rds")
knitr::kable(AIC.age)
MLE.age.sex <- readRDS(file = "data/MLE.age.sex.rds")
knitr::kable(MLE.age.sex)
AIC.age.sex <- readRDS(file = "data/AIC.age.sex.rds")
colnames(AIC.age.sex) <- "AIC"
knitr::kable(AIC.age.sex)
model.selection <- readRDS(file = "data/model.selection.rds")
knitr::kable(data.frame(model.selection))
params <- readRDS(file = "data/params.rds")
knitr::kable(data.frame(params))
AIC.age
AIC.age[1]
AIC.age[1,1]
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lkx724',
token='DE081FA9C2B45F54894EC525255466D2',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lkx724', token='DE081FA9C2B45F54894EC525255466D2', secret='Oh0GY4ctdUnyB9+uV/zWo+VmS0JaGh1Hx27LWgcO')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('app.R')
source('app.R')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example/app.R')
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example/app.R')
library(rsconnect)
rsconnect::deployApp('~/Desktop/MSc/spring/DS/profile-page/posts/example')
source('app.R')
source('~/app.R')
source('app.R')
# Load function definitions
source("app.R")
